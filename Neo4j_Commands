#
# Creating nodes and relationships in Neo4j: https://www.youtube.com/watch?v=3VHgmB0SPxQ 
# Intro to Cypher: https://www.youtube.com/watch?v=1TSBXZMv6tc&t=64s 
# Quickly create example graph data for Neo4j using Arrows: https://www.youtube.com/watch?v=fkD1agLtQ4I 
#
# Arrows: http://www.apcjones.com/arrows/ 
#



#
# Erstellen von 2 Nodes die miteinander gegenseitig verbunden sind:
#
create (x:Person {name:"Peter"}) – [:TEAM_MEMBER_OF] -> (y:Person {name:"Fabio"}) – [:BOSS_OF] -> (x)
return x,y



#
# Die Anzahl bestehender Nodes ausgeben:
#
match (n) return count(n)


#
# Suchen eines bestehenden Nodes, Erstellen einer Verbindung zu einem neuen Nodes:
#
match (x:Person {name:"Fabio"}) 
create (x) – [:TEAM_MEMBER_OF] -> (y:Person {name:"Dordaneh"})
return x,y 


#
# Verbinden von zwei vorhandenen Nodes:
#
match (x:Person {name:"Dordaneh"})
match (y:Person {name:"Fabio"})
create (x) – [:BOSS_OF] -> (y)
return x,y 


#
# Anzeigen aller «Boss»-Beziehungen:
#
match (x) – [:BOSS_OF] – (y)
return x,y 


#
# Erstellen eines neuen Nodes und diesen gegenseitig verbinden mit bestehendem Node:
#
match (x:Person {name:"Fabio"})
create (y:Person {name:"Mark"}) – [:TEAM_MEMBER_OF] -> (x) – [:BOSS_OF] -> (y)
return x,y


#
# Von wem ist Fabio der Boss:
#
match (y:Person {name:"Fabio"})
match (x) <– [:BOSS_OF] - (y)
return x


#
# Wer ist der Boss von Fabio:
#
match (y:Person {name:"Fabio"})
match (x) – [:BOSS_OF] -> (y)
return x


#
# Löschen einer konkreten Beziehung zwischen zwei konkreten Nodes:
#
match (:Person {name:"Fabio"}) - [r:TEAM_MEMBER_OF] -> (:Person {name:"Dordaneh"})
delete r 

match (:Person {name:"Fabio"}) <- [r:BOSS_OF] - (:Person {name:"Dordaneh"})
delete r 


#
# Löschen der ganzen Datenbank:
#
match (n)
detach delete n 


#
# Löschen eines doppelten Nodes mit all seinen Beziehungen:
#
MATCH (p:Person {name:"Dordaneh"})
WITH p.id as id, collect(p) AS nodes 
WHERE size(nodes) >  1
FOREACH (p in tail(nodes) | DETACH DELETE p)


#
# Umbenennen eines Nodes:
#
MATCH (p { name: 'Peter' })
SET p.name = 'Kessler'
RETURN p 



#
# Backup / Restore : A Neo4j database can be dumped and loaded using the following commands:
#
sudo -u neo4j 
neo4j-admin dump --database=<database> --to=<destination-path>
neo4j-admin load --from=<archive-path> --database=<database> [--force]
#
# Limitations
#
#     - The database should be shutdown before running the dump and load commands.
#
# Examples of usage
#
#     - Moving databases from one environment to another.
#
#              Using the dump and load commands is the recommended, and safe, way of  
#              transferring databases between environments.They understand which files 
#              need to be exported and imported and which should not.
#
#              By contrast, file system copy-and-paste of databases is not supported.
#
#




#
# CSV Import (The file URLs are relative to the import directory)
#
#     Import-Directory: /home/pkmlp/.config/Neo4j%20Desktop/Application/neo4jDatabases/database-902f7616-0421-4423-82d3-b4df46975ad3/installation-3.3.4/import/
#

#
# Schritt 1: Mit dem Export des ComponentCatalog aus Sherlock werden alle Komponenten erfasst
#
CREATE CONSTRAINT ON (c:Complaint) ASSERT c.ComponentName IS UNIQUE;
LOAD CSV WITH HEADERS FROM "file:////ComponentCatalog.csv" AS csvLine FIELDTERMINATOR ';' 
MERGE (c:Component { name: csvLine.ComponentName, 
                     ServiceGroup: csvLine.ServiceGroup, 
                     ServiceName: csvLine.ServiceName, 
                     ServiceID: toInteger(csvLine.ServiceID), 
                     ComponentName: csvLine.ComponentName, 
                     ComponentID: toInteger(csvLine.ComponentID) });

#
# Schritt 2: Mit dem Export des ComponentCatalog aus Sherlock werden alle Public Services erfasst
#            --> Jede Komponente ist einem Service zugeordnet
#
CREATE CONSTRAINT ON (s:Complaint) ASSERT s.ServiceName IS UNIQUE;
LOAD CSV WITH HEADERS FROM "file:////ComponentCatalog.csv" AS csvLine FIELDTERMINATOR ';' 
WITH csvLine
WHERE csvLine.ServiceGroup <> "Supporting Service" 
MERGE (s:Service { name: csvLine.ServiceName, 
                     ServiceGroup: csvLine.ServiceGroup, 
                     ServiceName: csvLine.ServiceName, 
                     ServiceID: toInteger(csvLine.ServiceID) });

#
# Schritt 3: Mit dem Export des ComponentCatalog aus Sherlock werden alle Supporting Services erfasst
#            --> Jede Komponente ist einem Service zugeordnet
#
CREATE CONSTRAINT ON (s:Complaint) ASSERT s.ServiceName IS UNIQUE;
LOAD CSV WITH HEADERS FROM "file:////ComponentCatalog.csv" AS csvLine FIELDTERMINATOR ';'
WITH csvLine
WHERE csvLine.ServiceGroup = "Supporting Service" 
MERGE (s:SupportingService { name: csvLine.ServiceName, 
                     ServiceGroup: csvLine.ServiceGroup, 
                     ServiceName: csvLine.ServiceName, 
                     ServiceID: toInteger(csvLine.ServiceID) });

#
# Alternative: Mit dem Export des ComponentCatalog aus Sherlock werden alle Services erfasst
#              --> Keine Unterscheidung Supporting Services <-> Public Services
#
CREATE CONSTRAINT ON (s:Complaint) ASSERT s.ServiceName IS UNIQUE;
LOAD CSV WITH HEADERS FROM "file:////ComponentCatalog.csv" AS csvLine FIELDTERMINATOR ';'
MERGE (s:SupportingService { name: csvLine.ServiceName, 
                     ServiceGroup: csvLine.ServiceGroup, 
                     ServiceName: csvLine.ServiceName, 
                     ServiceID: toInteger(csvLine.ServiceID) });
                     

#
# Anzeigen von Services resp. Components
#
#

match(c:Component) return c

match (s:Service)
where s.ServiceName CONTAINS 'Net'
return s;

match (s:Service)
where s.ServiceName STARTS WITH 'Net'
return s;

match (s:Service)
where s.ServiceName ENDS WITH 'Net'
return s;

//Show Komponenten anhand Beziehung
MATCH (n) -[r]-> (m)
WHERE r.title contains"Videodistribution"
RETURN n,m,r